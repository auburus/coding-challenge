from django.test import TestCase
from django.urls import reverse
from rest_framework.test import APITestCase
from rest_framework import status
from datetime import datetime, timezone
from emissary.main.models import Link, Visit
from emissary.main.serializers import LinkSerializer, VisitSerializer

"""
Tests module, where currently all the unit and integration testing sits

TODO: Split it in different files, since it has grown to a point that it
would benefit for the split mainly because there are unit tests and
integration tests mixed up.
"""

class LinkTestCase(TestCase):
    """UnitTests for the link class

    Check that the slug and date are autogenerated and that the visits are properly
    assigned to a link.
    """

    def test_create_basic_link(self):
        link = Link.objects.create(title="Wolverines")
        link.save()

        self.assertEqual("Wolverines", link.title)
        self.assertEqual("wolverines", link.slug)

        # Check that there is less than 5 seconds between now and when it was created
        self.assertTrue((datetime.now(timezone.utc) - link.created_at).total_seconds() < 5)

    def test_complex_autogenerated_slug(self):
        link = Link.objects.create(title="This is a l[ong] slug wÃ­th @ chars.")

        link.save()

        self.assertEqual("this-is-a-l-ong-slug-with-chars", link.slug)


    def test_different_slug(self):
        link = Link.objects.create(title="title 1", slug="completely-unrrelated-slug")
        link.save()

        self.assertEqual("completely-unrrelated-slug", link.slug)

    def test_count_visits(self):
        link = Link.objects.create(title="Link 1")
        link2 = Link.objects.create(title="Link 2")
        link.save()
        link2.save()

        visit1 = Visit.objects.create(link=link)
        visit2 = Visit.objects.create(link=link)
        visit3 = Visit.objects.create(link=link2)
        visit4 = Visit.objects.create(link=link)

        self.assertEqual(3, link.visits_count)
        self.assertEqual(1, link2.visits_count)


class LinkSerializerTestCase(TestCase):

    def test_basic_serialize(self):
        """Check that serializating a link provides all the required information"""

        link = Link.objects.create(title="Link 1")
        link.save()

        visit1 = Visit.objects.create(link=link)
        visit2 = Visit.objects.create(link=link)

        serializer = LinkSerializer(link)

        self.assertListEqual(
            sorted(['id', 'created_at', 'slug', 'title', 'visits_count', 'visits']),
            sorted(serializer.data.keys()))



class APILinkTestCase(APITestCase):
    def test_happy_path(self):
        """Ensure we can perform all the CRUD operations"""

        url = reverse('link-list')


        # Check that it returns nothing without data
        response = self.client.get(url)
        self.assertEqual(status.HTTP_200_OK, response.status_code)
        self.assertEqual([], response.data)


        # Create a new link
        response = self.client.post(url, {'title': 'Test title'})
        self.assertEqual(status.HTTP_201_CREATED, response.status_code)
        self.assertEqual(1, Link.objects.count(), 1)
        link = Link.objects.get()
        self.assertEqual('Test title', link.title)
        self.assertEqual('test-title', link.slug)
        self.assertEqual(0, link.visits_count)


        url = reverse('link-details', args=[link.id])


        # Partially update the slug
        response = self.client.patch(url, {'slug': 'new-slug'})
        self.assertEqual(status.HTTP_200_OK, response.status_code)

        link = Link.objects.get()
        self.assertEqual('Test title', link.title)
        self.assertEqual('new-slug', link.slug)


        # Change the title and the slug
        response = self.client.put(url, {'title':'A new test title', 'slug': 'changed-slug'})
        self.assertEqual(status.HTTP_200_OK, response.status_code)

        link = Link.objects.get()
        self.assertEqual('A new test title', link.title)
        self.assertEqual('changed-slug', link.slug)


        # Add some visits to the page
        url = reverse('landing', args=[link.slug])

        response = self.client.get(url)
        response = self.client.get(url)
        response = self.client.get(url)

        self.assertEqual(status.HTTP_200_OK, response.status_code)
        self.assertEqual({'title': link.title, 'text': "Tim has just made a revolutionary invention!"}, response.data)

        link = Link.objects.get()

        self.assertEqual(3, link.visits_count)


        # Delete
        url = reverse('link-details', args=[link.id])

        response = self.client.delete(url)
        self.assertEqual(status.HTTP_204_NO_CONTENT, response.status_code)
        self.assertEqual(0, Link.objects.count())
        self.assertEqual(0, Visit.objects.count())

