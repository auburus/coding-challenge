from django.db import models

from slugify import slugify

# Create your models here.

class Link(models.Model):
    """Referral links model

    Attributes:
        created_at (datetime)   Creation date of the link
        title (string)          Title of the page
        slug (string)           Autogenerated url-friendly string from title


    TODO: In a real situation we would have a field for a "soft-delete", to keep
    all the data from that link. In that case we would have a different "unique"
    rule for the title, i.e. only one active title with that name is allowed.

    For the purposes of this exercise, I won't attempt this case, so when the link is
    deleted all the data associated with it is lost.
    """

    created_at = models.DateTimeField(auto_now_add=True)
    title = models.CharField(max_length=127)

    # Slug automatically checks for uniqueness
    slug = models.SlugField(max_length=127)

    class Meta:
        ordering = ['-created_at']

    def save(self, *args, **kwargs):
        """Ensure slug is autogenerated if missing

        Uses the slugify library to autogenerate a slug in case it
        is not provided already
        """

        if self.slug is None or self.slug == '':
            self.slug = slugify(self.title)

        super(Link, self).save(*args, **kwargs)

    @property
    def visits_count(self):
        return self.visit_set.count()


class Visit(models.Model):
    """Visits tracker model. Many to one relation to links

    Attributes:
        date_time (datetime)    DateTime of the visit
        ip (string)             The ip of the visit
        user_agent (string)     The user agent of the visit
        link (Link)             Many to one relation

    It is done as a separate table to avoid concurrency problems by only
    doing inserts. It also allows us to track some parameters from the visits,
    although it can be improved by using cookies (in essence, saving the user's session).
    """

    date_time = models.DateTimeField(auto_now_add=True)

    # Django stores blanks as nulls for a GenericIPAddressField
    ip = models.GenericIPAddressField(null=True, blank=True)

    # User agents can get insanely long, so use a text field or a 4K long varchar.
    user_agent = models.TextField(blank=True)

    link = models.ForeignKey(Link, on_delete=models.CASCADE)

